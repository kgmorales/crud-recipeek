datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["lamora"]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64"]
  previewFeatures = ["multiSchema"]
}

model Bookmark {
  url        String
  title      String
  uid        String @id
  order_flag Int

  @@schema("lamora")
}

model Category {
  name       String
  uid        String  @id
  parent_uid String?
  order_flag Int

  @@schema("lamora")
}

model GroceryItem {
  aisle      String
  uid        String  @id
  order_flag Int
  recipe     String
  name       String
  purchased  Boolean
  recipe_uid String
  ingredient String

  @@schema("lamora")
}

model Meal {
  uid        String @id
  order_flag Int
  recipe_uid String
  date       String
  type       Int
  name       String

  @@schema("lamora")
}

model Menu {
  notes      String
  uid        String @id
  name       String
  order_flag Int

  @@schema("lamora")
}

model MenuItem {
  name       String
  recipe_uid String
  uid        String @id
  menu_uid   String
  order_flag Int

  @@schema("lamora")
}

model PantryItem {
  aisle      String
  uid        String @id
  ingredient String

  @@schema("lamora")
}

model ScrapedRecipe {
  id                Int      @id @default(autoincrement())
  author            String?
  canonical_url     String
  category          String
  cook_time         Int?
  description       String?
  host              String?
  image             String?
  ingredients       String[]
  instructions      String
  instructions_list String[]
  language          String
  nutrients         Json?
  prep_time         Int?
  ratings           Int?
  site_name         String
  title             String
  total_time        Int?
  yields            String?

  @@schema("lamora")
}

model Recipe {
  categories       String[]
  cook_time        String?
  created          String
  description      String?
  difficulty       String?
  directions       String
  hash             String
  id               String   @id @default(uuid())
  image_url        String?
  in_trash         Boolean
  ingredients      String
  is_pinned        Boolean
  name             String
  notes            String?
  nutritional_info String
  on_favorites     Boolean
  on_grocery_list  Boolean?
  photo            String?
  photo_hash       String?
  photo_large      String?
  photo_url        String?
  prep_time        String?
  rating           Int
  scale            String?
  servings         String?
  source           String
  source_url       String
  total_time       String?
  uid              String   @unique
  Blog             Blog[]

  @@schema("lamora")
}

model RecipeItem {
  hash String
  uid  String @id

  @@schema("lamora")
}

model Status {
  bookmarks          Int
  categories         Int
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  groceries          Int
  grocerylists       Int
  groceryaisles      Int
  groceryingredients Int
  meals              Int
  mealtypes          Int
  menus              Int
  menuitems          Int
  pantry             Int
  pantrylocations    Int
  photos             Int
  recipes            Int
  uid                Int      @id

  @@schema("lamora")
}

model PaprikaToken {
  id    Int    @id
  token String @unique

  @@schema("lamora")
}

model PaprikaConfig {
  baseURL     String
  bearerToken String?
  id          Int     @id @default(autoincrement())
  jwtSecret   String
  password    String
  user        String

  @@schema("lamora")
}

model PaprikaStatus {
  categories         Int
  recipes            Int
  photos             Int
  groceries          Int
  grocertlists       Int
  groceryaisles      Int
  groceryingredients Int
  meals              Int
  mealtypes          Int
  bookmarks          Int
  pantry             Int
  pantrylocations    Int
  menus              Int
  menuitems          Int
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  id                 Int      @id

  @@schema("lamora")
}

model Blog {
  content      String
  categoryId   Int?
  blogCategory BlogCategory? @relation(fields: [categoryId], references: [id])
  createdAt    DateTime      @default(now())
  id           Int           @id @default(autoincrement())
  title        String
  slug         String        @unique
  updatedAt    DateTime      @updatedAt
  recipeUID    String?
  recipe       Recipe?       @relation(fields: [recipeUID], references: [uid], onDelete: SetNull)

  @@schema("lamora")
}

model BlogCategory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  blogs Blog[]

  @@schema("lamora")
}
